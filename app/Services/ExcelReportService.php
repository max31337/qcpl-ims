<?php

namespace App\Services;

use Illuminate\Support\Collection;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Color;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;

/**
 * Enhanced Excel Report Service for QCPL-IMS
 * 
 * This service provides comprehensive Excel export functionality with:
 * - Professional header section with metadata
 * - Formatted table with styling and borders
 * - Footer with system branding
 * - Auto-sizing columns and frozen headers
 */
class ExcelReportService implements FromCollection, WithStyles, WithColumnWidths, WithHeadings, WithMapping, WithTitle, WithEvents
{
    protected Collection $data;
    protected array $columns;
    protected string $title;
    protected array $metadata;
    protected string $footerText;
    protected int $headerRowCount = 6; // Number of header rows before the table

    /**
     * Create a new Excel report instance
     *
     * @param Collection $data The data to export
     * @param array $columns Column definitions ['key' => 'Header Name', ...]
     * @param string $title Report title
     * @param array $metadata Metadata for header section
     */
    public function __construct(Collection $data, array $columns, string $title, array $metadata = [])
    {
        $this->data = $data;
        $this->columns = $columns;
        $this->title = $title;
        $this->metadata = array_merge([
            'exported_by' => auth()->user()->name ?? 'System',
            'department' => auth()->user()->currentBranch->name ?? 'Main Branch',
            'date_exported' => now()->format('F j, Y g:i A'),
        ], $metadata);
        $this->footerText = 'Generated by QCPL Asset & Supply Management System';
    }

    /**
     * Return the collection of data for export
     */
    public function collection()
    {
        return $this->data;
    }

    /**
     * Define the headings for the Excel sheet
     * This creates the header section before the table
     */
    public function headings(): array
    {
        return [
            // Row 1: Main title
            [$this->title],
            // Row 2: Empty for spacing
            [''],
            // Row 3: Exported by
            ['Exported By:', $this->metadata['exported_by']],
            // Row 4: Department/Branch
            ['Department/Branch:', $this->metadata['department']],
            // Row 5: Date exported
            ['Date Exported:', $this->metadata['date_exported']],
            // Row 6: Empty separator
            [''],
            // Row 7: Column headers
            array_values($this->columns)
        ];
    }

    /**
     * Map each data row for export
     */
    public function map($row): array
    {
        $mappedRow = [];
        foreach (array_keys($this->columns) as $key) {
            $value = data_get($row, $key);
            
            // Format specific data types
            if (is_numeric($value) && str_contains($key, 'cost') || str_contains($key, 'price') || str_contains($key, 'value')) {
                $value = number_format((float)$value, 2);
            } elseif ($value instanceof \Carbon\Carbon) {
                $value = $value->format('Y-m-d');
            }
            
            $mappedRow[] = $value;
        }
        return $mappedRow;
    }

    /**
     * Define column widths for optimal display
     */
    public function columnWidths(): array
    {
        $widths = [];
        $columnLetters = range('A', chr(ord('A') + count($this->columns) - 1));
        
        foreach ($columnLetters as $letter) {
            $widths[$letter] = 15; // Default width
        }
        
        // Set specific widths for common column types
        if (isset($this->columns['property_number']) || isset($this->columns['supply_number'])) {
            $widths['A'] = 12; // Item codes
        }
        if (isset($this->columns['description'])) {
            $widths['B'] = 30; // Descriptions need more space
        }
        
        return $widths;
    }

    /**
     * Define worksheet title
     */
    public function title(): string
    {
        return substr($this->title, 0, 31); // Excel sheet name limit
    }

    /**
     * Apply comprehensive styling to the worksheet
     */
    public function styles(Worksheet $sheet)
    {
        $totalRows = $this->data->count() + $this->headerRowCount + 1;
        $totalColumns = count($this->columns);
        $lastColumn = chr(ord('A') + $totalColumns - 1);

        return [
            // Main title styling (Row 1)
            '1:1' => [
                'font' => ['bold' => true, 'size' => 16],
                'alignment' => ['horizontal' => Alignment::HORIZONTAL_CENTER],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'E3F2FD']]
            ],
            
            // Metadata section styling (Rows 3-5)
            '3:5' => [
                'font' => ['size' => 10],
                'alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]
            ],
            
            // Table header styling (Row 7)
            ($this->headerRowCount + 1) . ':' . ($this->headerRowCount + 1) => [
                'font' => ['bold' => true, 'color' => ['rgb' => 'FFFFFF']],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => '1976D2']],
                'alignment' => ['horizontal' => Alignment::HORIZONTAL_CENTER],
                'borders' => ['allBorders' => ['borderStyle' => Border::BORDER_THIN]]
            ],
            
            // Data rows styling
            'A' . ($this->headerRowCount + 2) . ':' . $lastColumn . $totalRows => [
                'borders' => ['allBorders' => ['borderStyle' => Border::BORDER_THIN]],
                'alignment' => ['vertical' => Alignment::VERTICAL_TOP, 'wrapText' => true]
            ],
        ];
    }

    /**
     * Register events for additional formatting
     */
    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function(AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();
                $totalRows = $this->data->count() + $this->headerRowCount + 1;
                $totalColumns = count($this->columns);
                $lastColumn = chr(ord('A') + $totalColumns - 1);

                // Freeze the header row
                $sheet->freezePane('A' . ($this->headerRowCount + 2));

                // Auto-fit columns
                foreach (range('A', $lastColumn) as $column) {
                    $sheet->getColumnDimension($column)->setAutoSize(true);
                }

                // Add alternating row colors for data section
                for ($row = $this->headerRowCount + 2; $row <= $totalRows; $row++) {
                    if (($row - $this->headerRowCount) % 2 == 0) {
                        $sheet->getStyle('A' . $row . ':' . $lastColumn . $row)
                            ->getFill()
                            ->setFillType(Fill::FILL_SOLID)
                            ->getStartColor()
                            ->setRGB('F8F9FA');
                    }
                }

                // Right-align numeric columns (quantity, costs, etc.)
                foreach (array_keys($this->columns) as $index => $key) {
                    $column = chr(ord('A') + $index);
                    if (str_contains($key, 'quantity') || str_contains($key, 'cost') || str_contains($key, 'price') || str_contains($key, 'value')) {
                        $sheet->getStyle($column . ($this->headerRowCount + 2) . ':' . $column . $totalRows)
                            ->getAlignment()
                            ->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                    }
                }

                // Add footer text
                $lastRow = $totalRows + 2;
                $sheet->setCellValue('A' . $lastRow, $this->footerText);
                $sheet->getStyle('A' . $lastRow . ':' . $lastColumn . $lastRow)
                    ->getFont()
                    ->setItalic(true)
                    ->setSize(9);
                $sheet->getStyle('A' . $lastRow)
                    ->getAlignment()
                    ->setHorizontal(Alignment::HORIZONTAL_RIGHT);

                // Merge cells for main title
                $sheet->mergeCells('A1:' . $lastColumn . '1');
                
                // Merge cells for footer
                $sheet->mergeCells('A' . $lastRow . ':' . $lastColumn . $lastRow);
            }
        ];
    }
}